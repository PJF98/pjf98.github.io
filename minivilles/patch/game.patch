Seulement dans ./: Game.py
Seulement dans ../../splendor/alpha-zero-general/minivilles/: __init__.py
Seulement dans ./: main.js
Seulement dans ./: MCTS.py
diff -ur ../../splendor/alpha-zero-general/minivilles/MinivillesDisplay.py ./MinivillesDisplay.py
--- ../../splendor/alpha-zero-general/minivilles/MinivillesDisplay.py	2023-07-08 18:37:13.450430672 +0200
+++ ./MinivillesDisplay.py	2023-07-08 18:51:19.217407306 +0200
@@ -1,9 +1,6 @@
 import numpy as np
-from colorama import Style, Fore, Back
-import random
-import itertools
 
-def move_to_str(move):
+def move_to_str(move, short=False):
 	if   move < 15:
 		return f'buy {cards_description[move][-1]}'
 	elif move < 15+4:
@@ -17,95 +14,31 @@
 ############################# NAMES ######################################
 
 cards_description = [
-	(Back.BLUE   , Fore.WHITE, '  1  ', 1, 'banque â†’ 1 â†’ tous'     , 'champs de blÃ©'             ), # 0
-	(Back.BLUE   , Fore.WHITE, '  2  ', 1, 'banque â†’ 1 â†’ tous'     , 'ferme'                     ), # 1
-	(Back.GREEN  , Fore.WHITE, ' 2-3 ', 1, 'banque â†’ 1 â†’ moi '     , 'boulangerie'               ), # 2
-	(Back.RED    , Fore.WHITE, '  3  ', 2, 'lanceur â†’ 1 â†’ moi'     , 'cafÃ©'                      ), # 3
-	(Back.GREEN  , Fore.WHITE, '  4  ', 2, 'banque â†’ 3 â†’ moi'      , 'supÃ©rette'                 ), # 4
-	(Back.BLUE   , Fore.WHITE, '  5  ', 3, 'banque â†’ 1 â†’ tous'     , 'forÃªt'                     ), # 5
-	(Back.MAGENTA, Fore.WHITE, '  6  ', 6, 'tous â†’ 2 â†’ moi'        , 'stade'                     ), # 6
-	(Back.MAGENTA, Fore.WHITE, '  6  ', 8, 'qqun â‡† 1 carte â‡† moi'  , 'centre d\'affaires'        ), # 7
-	(Back.MAGENTA, Fore.WHITE, '  6  ', 7, 'qqun â†’ 5 â†’ moi'        , 'chaÃ®ne de tÃ©lÃ©vision'      ), # 8
-	(Back.GREEN  , Fore.WHITE, '  7  ', 5, 'banque â†’ 3*c2 â†’ moi'   , 'fromagerie'                ), # 9
-	(Back.GREEN  , Fore.WHITE, '  8  ', 3, 'banque â†’ 3*c5&9 â†’ moi' , 'fabrique de meubles'       ), # 10
-	(Back.BLUE   , Fore.WHITE, '  9  ', 6, 'banque â†’ 5 â†’ tous '    , 'mine'                      ), # 11
-	(Back.RED    , Fore.WHITE, ' 9-10', 3, 'lanceur â†’ 2 â†’ moi '    , 'restaurant'                ), # 12
-	(Back.BLUE   , Fore.WHITE, '  10 ', 3, 'banque â†’ 3 â†’ tous '    , 'verger'                    ), # 13
-	(Back.GREEN  , Fore.WHITE, '11-12', 2, 'banque â†’ 2*c1&10 â†’ moi', 'marchÃ© de fruits & lÃ©gumes'), # 14
+	('', '', '  1  ', 1, 'banque â†’ 1 â†’ tous'     , 'champs de blÃ©'             ), # 0
+	('', '', '  2  ', 1, 'banque â†’ 1 â†’ tous'     , 'ferme'                     ), # 1
+	('', '', ' 2-3 ', 1, 'banque â†’ 1 â†’ moi '     , 'boulangerie'               ), # 2
+	('', '', '  3  ', 2, 'lanceur â†’ 1 â†’ moi'     , 'cafÃ©'                      ), # 3
+	('', '', '  4  ', 2, 'banque â†’ 3 â†’ moi'      , 'supÃ©rette'                 ), # 4
+	('', '', '  5  ', 3, 'banque â†’ 1 â†’ tous'     , 'forÃªt'                     ), # 5
+	('', '', '  6  ', 6, 'tous â†’ 2 â†’ moi'        , 'stade'                     ), # 6
+	('', '', '  6  ', 8, 'qqun â‡† 1 carte â‡† moi'  , 'centre d\'affaires'        ), # 7
+	('', '', '  6  ', 7, 'qqun â†’ 5 â†’ moi'        , 'chaÃ®ne de tÃ©lÃ©vision'      ), # 8
+	('', '', '  7  ', 5, 'banque â†’ 3*c2 â†’ moi'   , 'fromagerie'                ), # 9
+	('', '', '  8  ', 3, 'banque â†’ 3*c5&9 â†’ moi' , 'fabrique de meubles'       ), # 10
+	('', '', '  9  ', 6, 'banque â†’ 5 â†’ tous '    , 'mine'                      ), # 11
+	('', '', ' 9-10', 3, 'lanceur â†’ 2 â†’ moi '    , 'restaurant'                ), # 12
+	('', '', '  10 ', 3, 'banque â†’ 3 â†’ tous '    , 'verger'                    ), # 13
+	('', '', '11-12', 2, 'banque â†’ 2*c1&10 â†’ moi', 'marchÃ© de fruits & lÃ©gumes'), # 14
 ]
 
 monuments_description = [
-	(Back.YELLOW, Fore.BLACK, 4,  '2 dÃ©s'                      , 'gare'               ), # 0
-	(Back.YELLOW, Fore.BLACK, 10, 'bonus c2-3 & 3 & 4 & 9-10'  , 'centre commercial'  ), # 1
-	(Back.YELLOW, Fore.BLACK, 16, 'tour bonus si double'       , 'tour radio'         ), # 2
-	(Back.YELLOW, Fore.BLACK, 22, 'peut relancer dÃ©s'          , 'parc d\'attractions'), # 3
+	('', '', 4,  '2 dÃ©s'                      , 'gare'               ), # 0
+	('', '', 10, 'bonus c2-3 & 3 & 4 & 9-10'  , 'centre commercial'  ), # 1
+	('', '', 16, 'tour bonus si double'       , 'tour radio'         ), # 2
+	('', '', 22, 'peut relancer dÃ©s'          , 'parc d\'attractions'), # 3
 ]
 
 ############################# PRINT GAME ######################################
 
-def _print_round_and_scores(board):
-	n = board.num_players
-	print('='*10, f' round {board.get_round()}    ', end='')
-	for p in range(n):
-		print(f'{Style.BRIGHT}P{p}{Style.RESET_ALL}: {board.get_score(p)} points  ', end='')
-	print('='*10, Style.RESET_ALL)
-
-def _print_values(array_with_two_values):
-	current_value, past_value = array_with_two_values[0], array_with_two_values[1]
-	if current_value > 0 or current_value != past_value:
-		print(f'{Style.BRIGHT}{current_value}', end='')
-		if current_value != past_value:
-			print(f'{Style.DIM}({past_value}){Style.RESET_ALL}  ', end='')
-		else:
-			print(f'{Style.RESET_ALL}     ', end='')
-	else:
-		print(f'      ', end='')
-
-def _print_card(board, i):
-	color_back, color_front, dice_value, cost, descr, full_name = cards_description[i]
-	print(f'{Style.DIM}{full_name[:25]:25}{Style.NORMAL} {descr:25} {cost}$  {color_back}{color_front}{dice_value}{Style.RESET_ALL} : ', end='')
-	for p in range(board.num_players):
-		_print_values(board.players_cards[15*p+i])
-	_print_values(board.market[i])
-	print()
-
-def _print_monument(board, i):
-	color_back, color_front, cost, descr, full_name = monuments_description[i]
-	print(f'{Style.DIM}{full_name[:25]:25}{Style.NORMAL} {descr:25} {cost:2}$ {color_back}{color_front}  M{i} {Style.RESET_ALL} : ', end='')
-	for p in range(board.num_players):
-		_print_values(board.players_monuments[4*p+i])
-	print()
-
-def _print_money_and_misc(board):
-	print(f'{" "*56}Money : ', end='')
-	for p in range(board.num_players):
-		print(f'{Style.BRIGHT}{board.players_money[p,0]:2}$   ', end='')
-	print(f'       ', end='')
-	print(f'{Style.DIM}dice {Style.RESET_ALL}{board.last_dice[0]}  ', end='')
-	print(f'{Style.DIM}state {Style.RESET_ALL}{board.player_state[0]}', end='')
-	print()
-
-def _print_main(board):
-	# Print titles
-	print(" "*26 + "Effet                    Cost  ðŸŽ² ", end='')
-	for p in range(board.num_players):
-		print(f'    P{p}', end='')
-	print(f'  Market', end='')
-	print()
-
-	# Print values for each card
-	for i in range(len(cards_description)):
-		_print_card(board, i)
-
-	# Print values for each monument
-	for i in range(len(monuments_description)):
-		_print_monument(board, i)
-
-	# Print money and misc
-	_print_money_and_misc(board)
-
-
 def print_board(board):
-	print()
-	_print_round_and_scores(board)
-	_print_main(board)
\ Pas de fin de ligne Ã  la fin du fichier
+	pass
\ Pas de fin de ligne Ã  la fin du fichier
diff -ur ../../splendor/alpha-zero-general/minivilles/MinivillesGame.py ./MinivillesGame.py
--- ../../splendor/alpha-zero-general/minivilles/MinivillesGame.py	2023-07-09 15:47:15.156087753 +0200
+++ ./MinivillesGame.py	2023-07-08 18:35:55.309634653 +0200
@@ -1,12 +1,9 @@
-import sys
-sys.path.append('..')
 from Game import Game
-from .MinivillesDisplay import print_board, move_to_str
-from .MinivillesLogicNumba import Board, observation_size, action_size
+from MinivillesDisplay import print_board, move_to_str
+from MinivillesLogicNumba import Board, observation_size, action_size
 import numpy as np
-from numba import jit, njit
 
-NUMBER_PLAYERS = 4
+NUMBER_PLAYERS = 2
 
 class MinivillesGame(Game):
 	def __init__(self):
diff -ur ../../splendor/alpha-zero-general/minivilles/MinivillesLogicNumba.py ./MinivillesLogicNumba.py
--- ../../splendor/alpha-zero-general/minivilles/MinivillesLogicNumba.py	2023-06-24 06:56:10.055314601 +0200
+++ ./MinivillesLogicNumba.py	2023-07-08 18:22:41.439046227 +0200
@@ -1,6 +1,4 @@
 import numpy as np
-from numba import njit
-import numba
 
 ############################## BOARD DESCRIPTION ##############################
 # Board is described by a 58x2 array (1st dim is larger with 3+ players). 2nd
@@ -37,34 +35,17 @@
 #####  19    Roll dice(s) again
 #####  20    No move
 
-@njit(cache=True, fastmath=True, nogil=True)
 def observation_size(num_players):
 	return (18 + 20*num_players, 2) # 2nd dimension is to keep history of previous states
 
-@njit(cache=True, fastmath=True, nogil=True)
 def action_size():
 	return 21
 
-@njit(cache=True, fastmath=True, nogil=True)
 def my_random_choice_and_normalize(prob):
 	normalized_prob = prob / prob.sum()
 	result = np.searchsorted(np.cumsum(prob), np.random.random(), side="right")
 	return result
 
-spec = [
-	('num_players'         , numba.int8),
-	('current_player_index', numba.int8),
-
-	('state'            , numba.int8[:,:]),
-	('round'            , numba.int8[:]),
-	('last_dice'        , numba.int8[:]),
-	('player_state'     , numba.int8[:]),
-	('market'           , numba.int8[:,:]),
-	('players_money'    , numba.int8[:,:]),
-	('players_cards'    , numba.int8[:,:]),
-	('players_monuments', numba.int8[:,:]),
-]
-@numba.experimental.jitclass(spec)
 class Board():
 	def __init__(self, num_players):
 		self.num_players = num_players
Seulement dans ../../splendor/alpha-zero-general/minivilles/: MinivillesNNet.py
Seulement dans ../../splendor/alpha-zero-general/minivilles/: MinivillesPlayers.py
Seulement dans ./: model.onnx
Seulement dans ../../splendor/alpha-zero-general/minivilles/: NNet.py
Seulement dans ./: patch
Seulement dans ../../splendor/alpha-zero-general/minivilles/: pretrained_2players.pt
Seulement dans ../../splendor/alpha-zero-general/minivilles/: pretrained_3players.pt
Seulement dans ../../splendor/alpha-zero-general/minivilles/: pretrained_4players.pt
Seulement dans ./: proxy.py
Seulement dans ../../splendor/alpha-zero-general/minivilles/: __pycache__
Seulement dans ../../splendor/alpha-zero-general/minivilles/: sample_game.gif
