Seulement dans ./: Game.py
Seulement dans ../../splendor/alpha-zero-general/thelittleprince/: __init__.py
Seulement dans ./: main.js
Seulement dans ./: MCTS.py
Seulement dans ./: model.onnx
Seulement dans ../../splendor/alpha-zero-general/thelittleprince/: NNet.py
Seulement dans ./: patch
Seulement dans ../../splendor/alpha-zero-general/thelittleprince/: pretrained_3players.pt
Seulement dans ../../splendor/alpha-zero-general/thelittleprince/: pretrained_4players.pt
Seulement dans ../../splendor/alpha-zero-general/thelittleprince/: pretrained_5players.pt
Seulement dans ./: proxy.py
Seulement dans ../../splendor/alpha-zero-general/thelittleprince/: __pycache__
diff -ur ../../splendor/alpha-zero-general/thelittleprince/TLPDisplay.py ./TLPDisplay.py
--- ../../splendor/alpha-zero-general/thelittleprince/TLPDisplay.py	2023-01-22 17:08:17.032265837 +0100
+++ ./TLPDisplay.py	2023-07-08 19:18:27.740729750 +0200
@@ -1,24 +1,21 @@
 import numpy as np
-from colorama import Style, Fore, Back
-import random
-import itertools
+from TLPLogicNumba import my_unpackbits
 
-from .TLPLogicNumba import my_unpackbits
+NUMBER_PLAYERS = 3
 
-
-def move_to_str(move, nb_players):
-	card_to_take, next_player = divmod(move, nb_players)
+def move_to_str(move, short=False):
+	card_to_take, next_player = divmod(move, NUMBER_PLAYERS)
 	card_str = f'take card {card_to_take}'
 
 	if   next_player == 0:
 		short_name_next = 'himself'
 	elif next_player == 1:
 		short_name_next = 'the player on his right'
-	elif next_player == nb_players-1:
+	elif next_player == NUMBER_PLAYERS-1:
 		short_name_next = 'the player on his left'
 	elif next_player == 2:
 		short_name_next = '2nd player on his right'
-	elif next_player == nb_players-2:
+	elif next_player == NUMBER_PLAYERS-2:
 		short_name_next = '2nd player on his left'
 	else: # should not happen
 		short_name_next = f'P+{next_player}'
@@ -69,140 +66,5 @@
 
 ############################# PRINT GAME ######################################
 
-def _print_round_and_scores(board):
-	n = board.num_players
-	print('='*10, f' round {board.get_round()}    ', end='')
-	for p in range(n):
-		print(f'{Style.BRIGHT}P{p}{Style.RESET_ALL}: {board.get_score(p)} points  ', end='')
-	print('='*10, Style.RESET_ALL)
-
-def _print_value(value):
-	if value > 0:
-		print(f' {Style.BRIGHT}{value:>2}{Style.RESET_ALL}', end='')
-	else:
-		print(f'  0', end='')
-
-def _print_centered_unicode(s, total_size):
-	printed_length = len(s.encode('utf-16-le')) // 2
-	nb_spaces_pre  = (total_size - printed_length) // 2
-	nb_spaces_post = total_size - printed_length - nb_spaces_pre
-	for _ in range(nb_spaces_pre):
-		print(' ', end='')
-	print(s, end='')
-	for _ in range(nb_spaces_post):
-		print(' ', end='')
-
-def _print_attribute(cell, row, use_two_rows, print_width = 6):
-	attributes_list = [attributes_sign[n_attribute] for n_attribute in range(14) if cell[n_attribute] for _ in range(cell[n_attribute])]
-	if use_two_rows:
-		n = min(len(attributes_list), 6) // 2
-		to_print = ''.join(attributes_list[:n]) if row == 0 else ''.join(attributes_list[n:6])
-	else:
-		to_print = ''.join(attributes_list)
-	_print_centered_unicode(to_print, print_width)
-
-
-def _print_score_details(board):
-	for player in range(board.num_players):
-		score = board.players_score[player]
-		scores_list = [(attributes_sign[n_attribute], score[n_attribute]) for n_attribute in range(1,14) if score[n_attribute]]
-		# Consider hack, see TLPLogicNumba:_compute_score()
-		if score[0] != 0: # Volcanoes penalty actually wrote in FACE_DOWN
-			scores_list.append( (' -', -score[0]) )
-
-		# Now print
-		char_count = 0
-		for (i, (emoji, sc)) in enumerate(scores_list):
-			if i > 0:
-				# print(f' + ', end='')
-				# char_count += 3
-				print(f'  ', end='')
-				char_count += 2
-			print(f'{emoji}{sc}', end='')
-			char_count += 3 if sc < 10 else 4
-		print(f' = {score.sum()}', end='')
-		char_count += 4 if score.sum() < 10 else 5
-
-		print(' '*(32-char_count), end='')
-	print()
-
-
-def _print_planets(board):
-	planet_size = 4
-	for planet_y in range(planet_size):
-		for row in range(3):
-			for player in range(board.num_players):
-				for planet_x in range(planet_size):
-					cell = board.players_cards[player*16+planet_y*4+planet_x,:]
-					if row == 2:      					# border line
-						print(f'{Style.DIM} . . . {Style.RESET_ALL}', end='')
-					elif cell[14] == 0: 				# Empty cell
-						print(f'      {Style.DIM}:{Style.RESET_ALL}', end='')
-					elif cell[14] >= 4*25: 				# Corner
-						if row == 0:
-							character = cell[14] - 4*25
-							print(f'{characters_name[character][:6]:>6}', end='')
-						else:
-							_print_attribute(cell, row, use_two_rows=False)
-						print(f'{Style.DIM}:{Style.RESET_ALL}', end='')
-					else:
-						_print_attribute(cell, row, use_two_rows=True)
-						print(f'{Style.DIM}:{Style.RESET_ALL}', end='')
-				print('    ', end='')
-			print()
-
-
-def _print_market(board):
-	print(f'{Fore.BLACK}{Back.WHITE}MARKET{Style.RESET_ALL} ', end='')
-	for i, card in enumerate(board.market):
-		if card[14] == 0:
-			print(f'{Style.DIM}card {i}:{Style.RESET_ALL}', end='')
-			print(' '*12, end='')
-		else:
-			print(f'card {i}:', end='')
-			if card[14] >= 4*25: 				# Corner
-				character = card[14] - 4*25
-				print(f'{characters_name[character][:6]:>6}', end='')
-				_print_attribute(card, 0, use_two_rows=False, print_width=6)
-			else:
-				_print_attribute(card, 0, use_two_rows=False, print_width=12)
-		print(f'  ', end='')
-
-	# print('  ', end='')
-	print()
-	print(f'who can be {Fore.BLACK}{Back.WHITE}next{Style.RESET_ALL}: ', end='')
-	who_can_play = my_unpackbits(board.round_and_state[2])
-	for p, can_play in enumerate(who_can_play):
-		if p == board.round_and_state[1]:
-			print(f'{Style.BRIGHT}P{p}{Style.RESET_ALL} ', end='')
-		elif can_play:
-			print(f'P{p} ', end='')
-		else:
-			print(f'   ', end='')
-	print()
-
-
-def _print_main(board):
-	# Print titles
-	print(' '*10, end='')
-	for p in range(board.num_players):
-		print(f'{Fore.BLACK}{Back.WHITE}Player {p}{Style.RESET_ALL}', end='')
-		print(' '*24, end='')
-	print()
-
-	_print_planets(board)
-	print()
-	_print_score_details(board)
-	print()
-	_print_market(board)
-
-	# for row in board.state.transpose():
-	# 	for col in row:
-	# 		print(f'{col:2}', end='')
-	# 	print()
-
-
 def print_board(board):
 	print()
-	_print_round_and_scores(board)
-	_print_main(board)
\ Pas de fin de ligne Ã  la fin du fichier
diff -ur ../../splendor/alpha-zero-general/thelittleprince/TLPGame.py ./TLPGame.py
--- ../../splendor/alpha-zero-general/thelittleprince/TLPGame.py	2023-07-09 15:48:45.177156278 +0200
+++ ./TLPGame.py	2023-07-08 19:16:34.346205449 +0200
@@ -1,10 +1,7 @@
-import sys
-sys.path.append('..')
 from Game import Game
-from .TLPLogicNumba import Board, observation_size, action_size
-from .TLPDisplay import move_to_str, print_board
+from TLPLogicNumba import Board, observation_size, action_size
+from TLPDisplay import move_to_str, print_board
 import numpy as np
-from numba import jit, njit
 
 NUMBER_PLAYERS = 3
 
diff -ur ../../splendor/alpha-zero-general/thelittleprince/TLPLogicNumba.py ./TLPLogicNumba.py
--- ../../splendor/alpha-zero-general/thelittleprince/TLPLogicNumba.py	2023-07-09 16:36:26.350777629 +0200
+++ ./TLPLogicNumba.py	2023-07-09 16:33:26.179968329 +0200
@@ -1,6 +1,4 @@
 import numpy as np
-from numba import njit
-import numba
 import random
 
 ############################## BOARD DESCRIPTION ##############################
@@ -35,15 +33,12 @@
 # REPEATABLE_RANDOM like in splendor/SplendorLogicNumba.py doesn't seem to help
 # for this game, probably because too much randomness...
 
-@njit(cache=True, fastmath=True, nogil=True)
 def observation_size(num_players):
 	return (18*num_players + 1, 15) # 2nd dimension is card attributes (like fox, sunset, ...)
 
-@njit(cache=True, fastmath=True, nogil=True)
 def action_size(num_players):
 	return num_players*num_players
 
-@njit(cache=True, fastmath=True, nogil=True)
 def my_random_choice_and_normalize(prob):
 	normalized_prob = prob / prob.sum()
 	result = np.searchsorted(np.cumsum(normalized_prob), np.random.random(), side="right")
@@ -51,16 +46,13 @@
 
 mask = np.array([128, 64, 32, 16, 8, 4, 2, 1], dtype=np.uint8)
 
-@njit(cache=True, fastmath=True, nogil=True)
 def my_packbits(array):
 	product = np.multiply(array.astype(np.uint8), mask[:len(array)])
 	return product.sum()
 
-@njit(cache=True, fastmath=True, nogil=True)
 def my_unpackbits(value):
 	return (np.bitwise_and(value, mask) != 0).astype(np.uint8)
 
-@njit(cache=True, fastmath=True, nogil=True)
 def slots_in_planet(card_type):
 	if   card_type == EMPTY:
 		raise Exception('you cannot take an empty card')
@@ -74,17 +66,6 @@
 		possible_slots = [0, 3, 12, 15]
 	return possible_slots
 
-spec = [
-	('num_players'         , numba.int8),
-	('current_player_index', numba.int8),
-
-	('state'            , numba.int8[:,:]),
-	('round_and_state'  , numba.int8[:]),
-	('market'           , numba.int8[:,:]),
-	('players_score'    , numba.int8[:,:]),
-	('players_cards'    , numba.int8[:,:]),
-]
-@numba.experimental.jitclass(spec)
 class Board():
 	def __init__(self, num_players):
 		self.num_players = num_players
Seulement dans ../../splendor/alpha-zero-general/thelittleprince/: TLPNNet.py
Seulement dans ../../splendor/alpha-zero-general/thelittleprince/: TLPPlayers.py
